- name: Setup ssh keys
  hosts: localhost
  connection: local

  vars:
    ssh_key_name: id_virtualbox
    git_key_name: id_git

  vars_prompt:
    - name: output_folder
      prompt: Where to output keys?
      private: false

  tasks:
    - name: generate new key pairs for ssh
      community.crypto.openssh_keypair:
        path: "~/.ssh/{{ ssh_key_name }}"
        type: ed25519
    - name: add public ssh key to known hosts
      ansible.posix.authorized_key:
        user: michele
        key: "{{ lookup('ansible.builtin.file', '~/.ssh/{{ ssh_key_name }}.pub') }}"
    - name: copy private key to output folder
      copy:
        remote_src: true
        src: '~/.ssh/{{ ssh_key_name }}'
        dest: "{{ output_folder }}/{{ ssh_key_name }}"
    - name: generate new key pairs for git
      community.crypto.openssh_keypair:
        path: "~/.ssh/{{ git_key_name }}"
        type: ed25519
    - name: copy public git key to output folder
      copy:
        remote_src: true
        src: '~/.ssh/{{ git_key_name }}.pub'
        dest: "{{ output_folder }}/{{ git_key_name }}.pub"
    - name: add block to ssh config for github
      blockinfile:
        path: "~/.ssh/config"
        prepend_newline: true
        block: |
          Host github.com
            Hostname github.com
            IdentityFile ~/.ssh/{{ git_key_name }}
        state: present
        create: true

- name: update system
  hosts: localhost
  connection: local
  
  tasks:

    - name: update & upgrade
      become: true
      apt:
        upgrade: "yes"
        update_cache: "yes"

- name: install apt packages
  hosts: localhost
  connection: local

  tasks:

    - name: install utils from apt
      become: true
      apt:
        pkg:
        - unzip
        - zip
        - python3-debian
        - apt-transport-https 
        - ca-certificates 
        - curl 
        - software-properties-common
        update_cache: "yes"

    - name: add gcloud source
      become: true
      ansible.builtin.deb822_repository:
        name: gloud 
        types: [deb]
        uris: "https://packages.cloud.google.com/apt"
        signed_by: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
        suites: [cloud-sdk]
        components: [main]
        state: present
        enabled: yes

    - name: add docker source
      become: true
      ansible.builtin.deb822_repository:
        name: docker 
        types: [deb]
        uris: "https://download.docker.com/linux/ubuntu"
        signed_by: "https://download.docker.com/linux/ubuntu/gpg"
        suites: ["{{ ansible_distribution_release }}"]
        components: [stable]
        state: present
        enabled: yes

    - name: add kubernetes source
      become: true
      ansible.builtin.deb822_repository:
        name: kubernetes 
        types: [deb]
        uris: "https://pkgs.k8s.io/core:/stable:/v1.30/deb/"
        signed_by: "https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key"
        suites: [/]
        state: present
        enabled: yes

    - name: add terraform source
      become: true
      ansible.builtin.deb822_repository:
        name: haschicorp
        types: [deb]
        uris: "https://apt.releases.hashicorp.com"
        signed_by: "https://apt.releases.hashicorp.com/gpg"
        suites: ["{{ ansible_distribution_release }}"]
        components: [main]
        state: present
        enabled: yes

    - name: install packages
      become: true
      apt:
        pkg:
        - net-tools
        - git
        - emacs
        - google-cloud-cli
        - google-cloud-cli-gke-gcloud-auth-plugin
        - docker-ce
        - docker-ce-cli
        - kubectl
        - gcc
        - make
        - npm
        - ripgrep
        - cmake
        - terraform
        update_cache: "yes"

- name: install non apt packages
  hosts: localhost
  connection: local

  vars:
    pyenv_root: "~/.pyenv"

  tasks:

    - name: install pyenv
      block:
        - name: checkout pyenv
          ansible.builtin.git:
            repo: https://github.com/pyenv/pyenv.git
            dest: "{{ pyenv_root }}"
            single_branch: yes
            version: master
            depth: 1
        - name: checkout pyenv update 
          ansible.builtin.git:
            repo: https://github.com/pyenv/pyenv-update.git
            dest: "{{ pyenv_root }}/plugins/pyenv-update"
            single_branch: yes
            version: master
            depth: 1
        - name: checkout pyenv virtualenv
          ansible.builtin.git:
            repo: https://github.com/pyenv/pyenv-virtualenv.git
            dest: "{{ pyenv_root }}/plugins/pyenv-virtualenv"
            single_branch: yes
            version: master
            depth: 1

        - name: add block to bashrc
          blockinfile:
            path: "~/.bashrc"
            marker: "# {mark} ansible block 1"
            block: |
              export PYENV_ROOT="$HOME/.pyenv"
              command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
              eval "$(pyenv init -)"
            state: present
            create: true

        - name: install python build suite
          become: true
          apt:
            pkg:
            - build-essential 
            - libssl-dev 
            - zlib1g-dev
            - libbz2-dev
            - libreadline-dev
            - libsqlite3-dev
            - curl
            - libncursesw5-dev
            - xz-utils
            - tk-dev
            - libxml2-dev
            - libxmlsec1-dev
            - libffi-dev
            - liblzma-dev
            update_cache: "yes"

    - name: install jira-cli
      block:

        - name: download archive 
          become: true
          ansible.builtin.unarchive:
            src: https://github.com/ankitpokhrel/jira-cli/releases/download/v1.5.1/jira_1.5.1_linux_x86_64.tar.gz
            dest: /usr/local
            creates: /usr/local/jira_1.5.1_linux_x86_64
            remote_src: yes
        - name: create link
          become: true
          ansible.builtin.file:
            src: /usr/local/jira_1.5.1_linux_x86_64/bin/jira
            dest: /usr/bin/jira
            state: link

    - name: install gh
      become: true
      apt:
        deb: https://github.com/cli/cli/releases/download/v2.48.0/gh_2.48.0_linux_amd64.deb

    - name: install sdkman 
      ansible.builtin.shell: curl -s "https://get.sdkman.io" | bash
      args:
        creates: "~/.sdkman"


- name: install nvim
  hosts: localhost
  connection: local

  tasks:

    - name: download & untar
      become: true
      ansible.builtin.unarchive:
        src: https://github.com/neovim/neovim/releases/download/v0.9.5/nvim-linux64.tar.gz
        dest: /usr/local
        creates: /usr/local/nvim-linux64
        remote_src: yes
    - name: create link
      become: true
      ansible.builtin.file:
        src: /usr/local/nvim-linux64/bin/nvim
        dest: /usr/bin/nvim
        state: link

- name: install spacemacs
  hosts: localhost
  connection: local

  tasks:

    - name: clone repo
      ansible.builtin.git:
        repo: https://github.com/syl20bnr/spacemacs.git
        dest: ~/.emacs.d
        single_branch: yes
        version: develop
        depth: 1

- name: install atuinsh
  hosts: localhost
  connection: local

  vars:
    blesh_root: "~/.blesh"

  tasks:

    - name: install atuinsh deb file
      become: true
      apt:
        deb: https://github.com/atuinsh/atuin/releases/download/v17.2.0/atuin_17.2.0_amd64.deb
    
    - name: install ble.sh
      block:
      
        - name: checkout ble.sh repo
          ansible.builtin.git:
            repo: https://github.com/akinomyoga/ble.sh.git
            dest: "{{ blesh_root }}"
            single_branch: yes
            version: master
            depth: 1

        - name: run ble.sh makefile
          community.general.make:
            chdir: "{{ blesh_root }}"
            target: install 
            params:
              PREFIX: ~/.local

    - name: add block to bashrc
      blockinfile:
        path: "~/.bashrc"
        marker: "# {mark} ansible block 2"
        prepend_newline: true
        block: |
          source ~/.local/share/blesh/ble.sh
          eval "$(atuin init bash)"
        state: present
        create: true

- name: install tmux
  hosts: localhost
  connection: local

  tasks:

    - name: install package
      become: true
      apt:
        pkg:
        - tmux
        update_cache: "yes"

    - name: install tpm
      ansible.builtin.git:
        repo: https://github.com/tmux-plugins/tpm.git
        dest: "~/.tmux/plugins/tpm"
        single_branch: yes
        version: master
        depth: 1

- name: copy configs
  hosts: localhost
  connection: local

  tasks:

    - name: copy nvim config
      ansible.builtin.copy:
        src: config/nvim
        dest: "~/.config"

    - name: copy nvim config
      ansible.builtin.copy:
        src: config/emacs/.spacemacs
        dest: "~/.spacemacs"

    - name: copy tmux config
      ansible.builtin.copy:
        src: config/tmux/.tmux.conf
        dest: "~/.tmux.conf"
